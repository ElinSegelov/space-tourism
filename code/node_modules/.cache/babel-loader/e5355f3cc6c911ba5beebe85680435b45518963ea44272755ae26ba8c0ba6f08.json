{"ast":null,"code":"import _styled from \"styled-components\";\nvar _jsxFileName = \"/Users/elin/Desktop/Egna projekt/Space-tourism-React/space-tourism/code/src/components/02-Crew/CrewSlider.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useSwipeable } from 'react-swipeable';\nimport { CrewImage } from '../ReusableStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CrewSlider = _ref => {\n  _s();\n  let {\n    crew,\n    activeIndex,\n    setActiveIndex\n  } = _ref;\n  //If updatedIndex is higher or lower than the numer of elements in crew, \n  // activeIndex is set to crew' lowest or highest index so the carousel \"loops\"\n  const updateActiveIndex = updatedIndex => {\n    if (updatedIndex < 0) {\n      updatedIndex = crew.length - 1;\n    } else if (updatedIndex >= crew.length) {\n      updatedIndex = 0;\n    }\n    setActiveIndex(updatedIndex);\n  };\n  //Enable swipe handeling och slider\n  const handlers = useSwipeable({\n    onSwipedLeft: () => updateActiveIndex(activeIndex + 1),\n    onSwipedRight: () => updateActiveIndex(activeIndex - 1)\n  });\n  const carouselImages = crew.map(member => {\n    return /*#__PURE__*/_jsxDEV(ImageWrapper, {\n      children: /*#__PURE__*/_jsxDEV(CrewImage, {\n        src: member.images.webp,\n        alt: member.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, member.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this);\n  });\n  const allIndicators = crew.map((member, index) => {\n    return /*#__PURE__*/_jsxDEV(Dot\n    // Opacity of button should change when it's active\n    , {\n      style: {\n        opacity: index === activeIndex && '1'\n      },\n      value: member.role,\n      type: \"button\",\n      onClick: () => {\n        updateActiveIndex(index);\n      }\n    }, member.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  });\n  // Inline styling for Inner is to shift between images using the active index * 100% to show the right image\n  return /*#__PURE__*/_jsxDEV(Carousel, {\n    ...handlers,\n    children: [/*#__PURE__*/_jsxDEV(Inner, {\n      style: {\n        transform: `translateX(-${activeIndex * 100}%)`\n      },\n      children: carouselImages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Indicators, {\n      children: allIndicators\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(CrewSlider, \"s1FKLEkRajd7B4AvjfDQYHBDtMY=\", false, function () {\n  return [useSwipeable];\n});\n_c = CrewSlider;\nexport default CrewSlider;\nconst Carousel = _styled.div.withConfig({\n  displayName: \"CrewSlider__Carousel\",\n  componentId: \"sc-1v8gotf-0\"\n})([\"overflow:hidden;@media (min-width:1200px){position:absolute;bottom:0;left:0%;}\"]);\n_c2 = Carousel;\nconst Inner = _styled.div.withConfig({\n  displayName: \"CrewSlider__Inner\",\n  componentId: \"sc-1v8gotf-1\"\n})([\"white-space:nowrap;transition:transform 0.3s;\"]);\n_c3 = Inner;\nconst ImageWrapper = _styled.div.withConfig({\n  displayName: \"CrewSlider__ImageWrapper\",\n  componentId: \"sc-1v8gotf-2\"\n})([\"border-bottom:0.1rem solid rgba(255,255,255,0.2);width:100%;display:inline-flex;align-items:center;justify-content:center;@media (min-width:600px){border:none;}\"]);\n_c4 = ImageWrapper;\nconst Indicators = _styled.div.withConfig({\n  displayName: \"CrewSlider__Indicators\",\n  componentId: \"sc-1v8gotf-3\"\n})([\"display:flex;width:fit-content;justify-content:space-around;margin:2rem auto;@media (min-width:600px){position:absolute;top:30%;left:calc(50% - 50px);}@media (min-width:1200px){top:80%;left:11.5%;position:fixed;margin:0;}\"]);\n_c5 = Indicators;\nconst Dot = _styled.button.withConfig({\n  displayName: \"CrewSlider__Dot\",\n  componentId: \"sc-1v8gotf-4\"\n})([\"width:0.6rem;height:0.6rem;border-radius:50%;background-color:var(--secondary-text);opacity:0.2;margin:0.5rem;@media (min-width:1200px){width:1rem;height:1rem;}\"]);\n_c6 = Dot;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"CrewSlider\");\n$RefreshReg$(_c2, \"Carousel\");\n$RefreshReg$(_c3, \"Inner\");\n$RefreshReg$(_c4, \"ImageWrapper\");\n$RefreshReg$(_c5, \"Indicators\");\n$RefreshReg$(_c6, \"Dot\");","map":{"version":3,"names":["React","useSwipeable","CrewImage","CrewSlider","crew","activeIndex","setActiveIndex","updateActiveIndex","updatedIndex","length","handlers","onSwipedLeft","onSwipedRight","carouselImages","map","member","images","webp","name","allIndicators","index","opacity","role","transform","Carousel","styled","div","Inner","ImageWrapper","Indicators","Dot","button"],"sources":["/Users/elin/Desktop/Egna projekt/Space-tourism-React/space-tourism/code/src/components/02-Crew/CrewSlider.js"],"sourcesContent":["import React from 'react';\nimport { useSwipeable } from 'react-swipeable'\nimport { CrewImage } from '../ReusableStyles';\nimport styled from 'styled-components/macro';\n\nconst CrewSlider = ({ crew, activeIndex, setActiveIndex }) => {\n\n  //If updatedIndex is higher or lower than the numer of elements in crew, \n  // activeIndex is set to crew' lowest or highest index so the carousel \"loops\"\n  const updateActiveIndex = (updatedIndex) => {\n    if (updatedIndex < 0) {\n      updatedIndex = crew.length-1;\n    } else if (updatedIndex >= crew.length) {\n      updatedIndex =  0\n    }\n    setActiveIndex(updatedIndex)\n  }\n  //Enable swipe handeling och slider\n  const handlers = useSwipeable({\n    onSwipedLeft: () => updateActiveIndex(activeIndex +1),\n    onSwipedRight: () => updateActiveIndex(activeIndex -1)\n  })\n\n  const carouselImages = crew.map((member) => {\n    return (\n      <ImageWrapper key={member.name}>\n        <CrewImage src={member.images.webp} alt={member.name} />\n      </ImageWrapper>\n    )\n  })\n\n  const allIndicators = crew.map((member, index) => {\n    return (\n      <Dot\n      // Opacity of button should change when it's active\n        style={{ opacity: index === activeIndex && '1'}}\n        key={member.name}\n        value={member.role}\n        type=\"button\"\n        onClick={() => {updateActiveIndex(index)}}>\n      </Dot>\n    )\n    })\n  // Inline styling for Inner is to shift between images using the active index * 100% to show the right image\n  return(\n    <Carousel {...handlers}>\n      <Inner style={{ transform: `translateX(-${activeIndex *100}%)` }}>\n        {carouselImages}\n      </Inner>\n      <Indicators>\n        {allIndicators}\n      </Indicators>\n    </Carousel>\n  )\n}\n\nexport default CrewSlider;\n\nconst Carousel = styled.div`\n  overflow: hidden;\n\n  @media (min-width: 1200px) {\n    position: absolute;\n    bottom: 0;\n    left: 0%;\n  }\n`\n\nconst Inner = styled.div`\n  white-space: nowrap;\n  transition: transform 0.3s;\n\n\n`\n\nconst ImageWrapper = styled.div`\n  border-bottom: 0.1rem solid rgba(255,255,255,0.2);\n  width: 100%;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  \n\n  @media (min-width: 600px) {\n    border: none;\n  }\n`\n\nconst Indicators = styled.div`\n  display: flex;\n  width: fit-content;\n  justify-content: space-around;\n  margin: 2rem auto;\n  \n  @media (min-width: 600px) {\n    position: absolute;\n    top: 30%;\n    left: calc(50% - 50px);\n  }\n  @media (min-width: 1200px) {\n    top: 80%;\n    left: 11.5%;\n    position: fixed;\n    margin: 0;\n  }\n`\n\nconst Dot = styled.button`\n  width: 0.6rem;\n  height: 0.6rem;\n  border-radius: 50%;\n  background-color: var(--secondary-text);\n  opacity: 0.2;\n  margin: 0.5rem;\n  \n  @media (min-width: 1200px) {\n    width: 1rem;\n    height: 1rem;\n  }\n`"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,iBAAiB;AAC9C,SAASC,SAAS,QAAQ,mBAAmB;AAAC;AAG9C,MAAMC,UAAU,GAAG,QAA2C;EAAA;EAAA,IAA1C;IAAEC,IAAI;IAAEC,WAAW;IAAEC;EAAe,CAAC;EAEvD;EACA;EACA,MAAMC,iBAAiB,GAAIC,YAAY,IAAK;IAC1C,IAAIA,YAAY,GAAG,CAAC,EAAE;MACpBA,YAAY,GAAGJ,IAAI,CAACK,MAAM,GAAC,CAAC;IAC9B,CAAC,MAAM,IAAID,YAAY,IAAIJ,IAAI,CAACK,MAAM,EAAE;MACtCD,YAAY,GAAI,CAAC;IACnB;IACAF,cAAc,CAACE,YAAY,CAAC;EAC9B,CAAC;EACD;EACA,MAAME,QAAQ,GAAGT,YAAY,CAAC;IAC5BU,YAAY,EAAE,MAAMJ,iBAAiB,CAACF,WAAW,GAAE,CAAC,CAAC;IACrDO,aAAa,EAAE,MAAML,iBAAiB,CAACF,WAAW,GAAE,CAAC;EACvD,CAAC,CAAC;EAEF,MAAMQ,cAAc,GAAGT,IAAI,CAACU,GAAG,CAAEC,MAAM,IAAK;IAC1C,oBACE,QAAC,YAAY;MAAA,uBACX,QAAC,SAAS;QAAC,GAAG,EAAEA,MAAM,CAACC,MAAM,CAACC,IAAK;QAAC,GAAG,EAAEF,MAAM,CAACG;MAAK;QAAA;QAAA;QAAA;MAAA;IAAG,GADvCH,MAAM,CAACG,IAAI;MAAA;MAAA;MAAA;IAAA,QAEf;EAEnB,CAAC,CAAC;EAEF,MAAMC,aAAa,GAAGf,IAAI,CAACU,GAAG,CAAC,CAACC,MAAM,EAAEK,KAAK,KAAK;IAChD,oBACE,QAAC;IACD;IAAA;MACE,KAAK,EAAE;QAAEC,OAAO,EAAED,KAAK,KAAKf,WAAW,IAAI;MAAG,CAAE;MAEhD,KAAK,EAAEU,MAAM,CAACO,IAAK;MACnB,IAAI,EAAC,QAAQ;MACb,OAAO,EAAE,MAAM;QAACf,iBAAiB,CAACa,KAAK,CAAC;MAAA;IAAE,GAHrCL,MAAM,CAACG,IAAI;MAAA;MAAA;MAAA;IAAA,QAIZ;EAER,CAAC,CAAC;EACJ;EACA,oBACE,QAAC,QAAQ;IAAA,GAAKR,QAAQ;IAAA,wBACpB,QAAC,KAAK;MAAC,KAAK,EAAE;QAAEa,SAAS,EAAG,eAAclB,WAAW,GAAE,GAAI;MAAI,CAAE;MAAA,UAC9DQ;IAAc;MAAA;MAAA;MAAA;IAAA,QACT,eACR,QAAC,UAAU;MAAA,UACRM;IAAa;MAAA;MAAA;MAAA;IAAA,QACH;EAAA;IAAA;IAAA;IAAA;EAAA,QACJ;AAEf,CAAC;AAAA,GAjDKhB,UAAU;EAAA,QAaGF,YAAY;AAAA;AAAA,KAbzBE,UAAU;AAmDhB,eAAeA,UAAU;AAEzB,MAAMqB,QAAQ,GAAGC,OAAM,CAACC,GAAG;EAAA;EAAA;AAAA,sFAQ1B;AAAA,MARKF,QAAQ;AAUd,MAAMG,KAAK,GAAGF,OAAM,CAACC,GAAG;EAAA;EAAA;AAAA,qDAKvB;AAAA,MALKC,KAAK;AAOX,MAAMC,YAAY,GAAGH,OAAM,CAACC,GAAG;EAAA;EAAA;AAAA,wKAW9B;AAAA,MAXKE,YAAY;AAalB,MAAMC,UAAU,GAAGJ,OAAM,CAACC,GAAG;EAAA;EAAA;AAAA,qOAiB5B;AAAA,MAjBKG,UAAU;AAmBhB,MAAMC,GAAG,GAAGL,OAAM,CAACM,MAAM;EAAA;EAAA;AAAA,wKAYxB;AAAA,MAZKD,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}